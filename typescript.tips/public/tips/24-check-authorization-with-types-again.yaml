title: Check Authorization With Types (again)
description: Moving authorization from value to type level can make your code simpler and bullet-proof.
badCode: |
  const dropDatabase = (performedBy: User) => {
    if (performedBy.type === "AMDIN" || performedBy.type === "EDTIOR") { // ⛔️ Typos
      return
    }
    // ...
  }

  dropDatabase(member) // ⛔️
goodCode: |
  type MemberKind = "user"
  type User = { _kind: "admin" } | { _kind: "editor" } | { _kind: MemberKind }
  type FilterPrivileged<U extends User> = U extends { _kind: MemberKind } ? never : U
  type Privileged = FilterPrivileged<User>

  const dropDatabase = (performedBy: Privileged) => {
    // ...
  }

  dropDatabase(member) // ✅ Does not compile
