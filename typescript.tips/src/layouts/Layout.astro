---
interface Props {
  title: string;
  description: string;
  canonical: string;
}

const { title, description, canonical } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="generator" content={Astro.generator} />
    <meta property="og:title" content={title} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical} />
    <meta property="og:image" content="https://typescript.tips/logo.png" />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="https://typescript.tips/logo.png" />
    <meta name="twitter:image:alt" content="Blue square with TIPS in yellow sitting on TS in white." />
    <link rel="manifest" href="/site.webmanifest">
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="apple-touch-icon" href="/apple-touch-icon.png">
    <link rel="canonical" href={canonical} />
    <script>
      import * as Turbo from "@hotwired/turbo";
    </script>
  </head>
  <body>
    <slot />
  </body>
</html>

<style is:global>
* {
  font-family: 'Open Sans', sans-serif;
}

code, code * {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  font-size: 0.9rem !important;
}

code, .hljs {
  background-color: unset;
  display: block;
  padding: 0 20px !important;
}
</style>

<script>
  import { cache } from "@hotwired/turbo"

  let scrollTop = 0

  document.addEventListener('turbo:click', (event) => {
    if (!(event.target instanceof HTMLElement)) { return }

    if (event.target.matches('[data-turbo-preserve-scroll]')) {
      // When restoring a cached page, the scroll goes to 0 for a millisecond,
      // so let's avoid using the cache.
      cache.clear()
      scrollTop = document.documentElement.scrollTop;
    }
  })

  document.addEventListener('turbo:load', () => {
    if (scrollTop) document.documentElement.scrollTop = scrollTop
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const head = document.querySelector("head")
    if (!(head instanceof HTMLElement)) { return }

    const hrefs = [
      "https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap",
      "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/mono-blue.min.css",
    ]
    hrefs.forEach(href => {
      const resource = document.createElement("link")
      resource.setAttribute("rel", "stylesheet")
      resource.setAttribute("href", href)
      resource.setAttribute("type", "text/css")
      head.appendChild(resource)
    })
  })
</script>
